using System;
using _Wormcatcher.Scripts.Audio;
using UnityEngine;
using UnityEngine.InputSystem;
using Debug = FMOD.Debug;

namespace _Wormcatcher.Scripts.Inputs
{
    /// <summary>
    /// Moves the player based in the inputs defined in FPS_Inputs
    /// used the autogenerated class "PlayerInputAction" to acces inputs 
    /// </summary>
    public class PlayerMovement : MonoBehaviour
    {

        [SerializeField] private bool movable = true; 
        // Input 
        private PlayerInputAction playerInputAction;
        private InputAction sprintAction;
        private InputAction movementAction; 
    
    
        [SerializeField] CharacterController controller;
        [SerializeField] Transform groundCheck;
    
        private float xInput;
        private float zInput;
    
        // Movement Parameters 
        [SerializeField] private float baseSpeed = 2f;
        [SerializeField] private float targetSpeed;
        [SerializeField]private float currentSpeed; 
        [SerializeField] private float gravity = -9.81f;

        // Collision
        [SerializeField] private float groundDistance = 0.4f;
        [SerializeField] private LayerMask groundMask;
    
        private Vector3 velocity;
        [SerializeField]private bool isGrounded;
    
        [SerializeField] private float decelerationRate = 5f;
        [SerializeField] private float accelerationRate = 3f;

        private float time;
        [SerializeField] private float stepBaseRate = 0.2f;
        private StepSoundManager stepSoundManager;
        private bool isWalking;
        
        private void Awake()
        {
            playerInputAction = new PlayerInputAction(); 
            if(movable)
                playerInputAction.WalkInput.Enable();
            sprintAction = playerInputAction.WalkInput.Sprint;
            movementAction = playerInputAction.WalkInput.Movement;
            stepSoundManager = GetComponent<StepSoundManager>();
        }

        void Start()
        {
            if (controller == null)
                controller = GetComponent<CharacterController>();
        }

        // Update is called once per frame
        void Update()
        {
            HandleGravity();
            HandleSprintInput();
            MoveCharacter();
            time += Time.deltaTime;
            if (isWalking && time >= 1/currentSpeed*stepBaseRate)
            {
                stepSoundManager.PlayStepSound();
                time = 0; 
            }
        }

        private void MoveCharacter()
        {
            Vector3 move = transform.right * xInput + transform.forward * zInput;

            controller.Move(move * currentSpeed * Time.deltaTime);
            isWalking = move.magnitude > 0.2f; 
            

            velocity.y += gravity * Time.deltaTime;

            controller.Move(velocity * Time.deltaTime);
        }

        private void HandleSprintInput()
        {
            Boolean sprintInput = sprintAction.ReadValue<float>() != 0;

            currentSpeed = sprintInput
                ? Mathf.Clamp((currentSpeed += (accelerationRate * Time.deltaTime)), 0, targetSpeed)
                : Mathf.Clamp((currentSpeed -= (decelerationRate * Time.deltaTime)), baseSpeed, targetSpeed);

            xInput = movementAction.ReadValue<Vector2>().x;
            zInput = movementAction.ReadValue<Vector2>().y;
        }

        private void HandleGravity()
        {
            isGrounded = Physics.CheckSphere(groundCheck.position, groundDistance, groundMask);

            if (isGrounded && velocity.y < -2)
                velocity.y = -2;
        }
    }
}
