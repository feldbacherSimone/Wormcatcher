using System;
using _Wormcatcher.Scripts.Audio;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.Serialization;
using Debug = FMOD.Debug;

namespace _Wormcatcher.Scripts.Inputs
{
    /// <summary>
    /// Moves the player based in the inputs defined in FPS_Inputs
    /// used the autogenerated class "PlayerInputAction" to acces inputs 
    /// </summary>
    public class PlayerMovement : MonoBehaviour
    {
        [SerializeField] private bool movable = true;

        public bool Movable
        {
            get => movable;
            set => movable = value;
        }

        public bool Active
        {
            get => activeOnStart;
            set => activeOnStart = value;
        }

        [Tooltip("This is just for vignette 1 to ensure that the position can be changed before any movement code is executed")]
        [SerializeField] private bool activeOnStart = true;

        // Input 
        private PlayerInputAction playerInputAction;
        private InputAction sprintAction;
        private InputAction movementAction;


        [SerializeField] CharacterController controller;
        [SerializeField] Transform groundCheck;

        private float xInput;
        private float zInput;

        // Movement Parameters 
        [SerializeField] private float baseSpeed = 2f;
        [SerializeField] private float targetSpeed;
        [SerializeField] private float currentSpeed;
        [SerializeField] private float gravity = -9.81f;

        // Collision
        [SerializeField] private float groundDistance = 0.4f;
        [SerializeField] private LayerMask groundMask;

        private Vector3 velocity;
        [SerializeField] private bool isGrounded;

        [SerializeField] private float decelerationRate = 5f;
        [SerializeField] private float accelerationRate = 3f;

        private float time;
        [SerializeField] private float stepBaseRate = 0.2f;
        private StepSoundManager2 stepSoundManager;
        private bool isWalking;


        public void DisableWalk()
        {
            
            movable = false;
            if(playerInputAction == null) return;
            playerInputAction.WalkInput.Disable();
        }

        private void Awake()
        {
            playerInputAction = new PlayerInputAction();
            if (movable)
            {
                playerInputAction.WalkInput.Enable();

                sprintAction = playerInputAction.WalkInput.Sprint;
                movementAction = playerInputAction.WalkInput.Movement;
                stepSoundManager = GetComponent<StepSoundManager2>();
                sprintAction.started += _ => setSprintSound(walkState.Run);
                sprintAction.canceled += _ => setSprintSound(walkState.Walk);
            }
            else
            {
                playerInputAction.WalkInput.Disable();
            }
        }

        void Start()
        {
            if (controller == null)
                controller = GetComponent<CharacterController>();
        }

        // Update is called once per frame
        void Update()
        {
            if (!activeOnStart) return;
            if (!controller.enabled) controller.enabled = true; 
            HandleGravity();
            if (!playerInputAction.WalkInput.enabled) return;
            HandleSprintInput();
            MoveCharacter();
            time += Time.deltaTime;

            if (isWalking)
            {
                stepSoundManager.StartSteps();
            }
            else
            {
                stepSoundManager.StopSteps();
            }
        }

        private void OnDisable()
        {
            playerInputAction.WalkInput.Disable();
        }

        private void setSprintSound(walkState walkState)
        {
            stepSoundManager.setFootstepSpeed(walkState);
        }

        private void MoveCharacter()
        {
            Vector3 move = transform.right * xInput + transform.forward * zInput;

            controller.Move(move * currentSpeed * Time.deltaTime);
            isWalking = move.magnitude > 0.2f;


            velocity.y += gravity * Time.deltaTime;

            controller.Move(velocity * Time.deltaTime);
        }

        private void HandleSprintInput()
        {
            if (!playerInputAction.WalkInput.enabled) return;
            Boolean sprintInput = sprintAction.ReadValue<float>() != 0;

            currentSpeed = sprintInput
                ? Mathf.Clamp((currentSpeed += (accelerationRate * Time.deltaTime)), 0, targetSpeed)
                : Mathf.Clamp((currentSpeed -= (decelerationRate * Time.deltaTime)), baseSpeed, targetSpeed);

            xInput = movementAction.ReadValue<Vector2>().x;
            zInput = movementAction.ReadValue<Vector2>().y;
        }

        private void HandleGravity()
        {
            isGrounded = Physics.CheckSphere(groundCheck.position, groundDistance, groundMask);

            if (isGrounded && velocity.y < -2)
                velocity.y = -2;
        }
    }
}